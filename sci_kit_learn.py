# -*- coding: utf-8 -*-
"""sci-kit learn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WtpZsRX-8aQPGGvGYcvrfupJ8DNug--_

#### eğitim ve test verisi ayırma
"""

from sklearn.model_selection import train_test_split
x_egitim, y_test, y_egitim, y_test = train_test_split(X, y, test_size=0.4, random_state=101)

"""#lineer regresyon modeli oluşturma"""

from sklearn.linear_model import LinearRegression
lineer_model= LinearRegression(normalize=True)
print(help(lineer_model))
#lineer_model.fit(x_egitim,y_egitim)

"""#### tahmin fonksiyonu"""

tahmin = lineer_model.predict(X_test)

"""#### lojistik regresyon modeli oluşturma



"""

from sklearn.linear_model import LogisticRegression
lojistik_model = LogisticRegression()
lojistik_model.fit(X_train,y_train)

"""#### k en yakın komşu modeli oluşturma
ideal k değeri için döngü kurulurak farklı sayılar denenir
"""

from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier(n_neighbors=1)
knn.fit(x_egitim,y_egitim)

"""#### karar ağaçları modeli oluşturma"""

from sklearn.tree import DecisionTreeClassifier
karar_agacı = DecisionTreeClassifier()
karar_agacı.fit(X_train,y_train)

"""#### rasgele orman modeli oluşturma"""

from sklearn.ensemble import RandomForestClassifier
ras_orman_modeli = RandomForestClassifier(n_estimators=100)
ras_orman_modeli.fit(x_egitim,y_egitim)

"""#### destek vektör makineleri"""

from sklearn.svm import SVC
svc_model= SVC()
svc_model.fit(x_egitim,y_egitim)

"""#### ızgara arama modeli"""

from sklearn.model_selection import GridSearchCV, SVC
ızgara_arama = GridSearchCV(SVC(),param_grid,refit=True,verbose=3)
ızgara_arama.fit(x_egitim,y_egitim)
ızgara_arama.best_params_  # en iyi parametre
ızgara_arama.best_esimator_ # en iyi tahmin değerleri

"""#### kmeans kümeleme modeli"""

from sklearn.cluster import KMeans
kmeans_modeli = KMeans(n_clusters=4)
kmeans_modeli.fit(işlenmiş_veri)
print(kmeans_modeli.cluster_centers_ )# küme merkezleri
print(kmeans_modeli.labels_)# küme etiketleri

"""#### Temel bileşenler Analizi"""

from sklearn.decomposition import PCA
temel_bilesenler= PCA(n_components=2)
temel_bilesenler.fit(işlenmiş_veri)

"""#### Model değerlendirme"""

lineer_model.intercept_

"""####  hata matrisi  (confusin matris ) görüntüleme"""

from sklearn.metrics import confusion_matrix
print(confusion_matrix(y_test,tahmin)

# model metrikleri
from sklearn import metrics
print('MAE:', metrics.mean_absolute_error(y_test, tahmin))
print('MSE:', metrics.mean_squared_error(y_test, tahmin))
print('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, tahmin)))

"""#### sınıflandırma raporları oluşturma"""

from sklearn.metrics import classification_report
print(classification_report(y_test,tahmin))